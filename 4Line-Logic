#lang racket

(require racket/trace)


;; Create the matrix 
(define (4line rows columns)
  (cond 
    [(< rows 8) (error "Debe ser mínimo un tablero 8x8")]
    [(< columns 8) (error "Debe ser mínimo un tablero 8x8")]
    [(> rows 16) (error "Debe ser máximo un tablero 16x16")]
    [(> columns 16) (error "Debe ser máximo un tablero 16x16")]
  [else (createBoardMatrix rows columns '())]))

(define (createBoardMatrix rows columns result)
  (cond ((zero? columns)
         result)
   (else
         (createBoardMatrix rows (- columns 1) (cons (createList rows '()) result)))))

(define (createList rows result)
  (cond ((zero? rows)
        result)
   (else
        (createList (- rows 1) (append '(0) result)))))


;; Select a column to insert the coin

(define (insertCoin column player matrix)
  (cond
    [(= column 1) (cons (insertCoin_aux (car matrix) player) (cdr matrix)]
    [else (cons (car matrix) (list (insertCoin (- column 1) player (cdr matrix))))]))

(trace insertCoin)

(define (insertCoin_aux selectedRow player)
  (cond
    [(null? (cdr selectedRow)) (append (list player) (cdr selectedRow))]
    [(not(zero? (cadr selectedRow))) (append (list player) (cdr selectedRow))]
    [else (cons (car selectedRow) (insertCoin_aux (cdr selectedRow) player))]))

(trace insertCoin_aux)


















