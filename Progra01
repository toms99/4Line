#lang racket
;; #lang racket/gui
(require racket/gui/base)


;; --------------- MainWindow ---------------

; Make a mainFrame by instantiating the frame% class
(define frame (new frame%
                   [label "4Line"]
                   [width 400]
                   [height 400]))

; Make a slider to define number of columns
(define slider (new slider%
                    (label "Columns")
                    (parent frame)
                    (min-value 8)
                    (max-value 16)
                    (init-value 10)))


; Make a button in the frame
(new button% [parent frame]
             [label "NEW GAME"]
             ; Callback procedure for a button click:
             [callback (lambda (button event)
                         (createBoardButtons (send slider get-value))
                         (send frame show #f)
                         (send gameFrame show #t)            
                         )])

(new button% [parent frame]
             [label "CLOSE"]
             [callback (lambda (button event)
                         (send frame show #f))])

;; --------------- GameWindow ---------------

; GameFrame
(define gameFrame (new frame%
                   [label "4Line"]
                   [width 1050]
                   [height 800]))

; Make a static text message in the frame
(define msg (new message% [parent gameFrame]
                          [label "No events so far..."]))

; Button to go back to MainWindow
(new button% [parent gameFrame]
             [label "Back to Menu"]
             [callback (lambda (button event)
                         (send frame show #t)
                         (send gameFrame show #f))])

;; Creates the panel that manages all the holeButtons
(define boardPanel
  (new horizontal-pane%	 
       [parent gameFrame]	 
       [alignment '(center center)]	 
       [min-width 630]	 
       [min-height 630]	 
       [stretchable-width #f]	 
       [stretchable-height #f]))

;; Creates all the holeButtons inside board.
;; param: number of columns, total number of buttons
(define (createBoardButtons columns)
  (createBoardMatrix columns columns '())
  (createBoardButtonsAux columns (* columns columns) 0
                         (createBoardMatrix columns columns '())))

(define (createBoardButtonsAux rows mxn cont matrix)
  (cond ((>= (* cont rows) mxn)
         "Done Creating the board")
   (else
         (createHoleButton (createVerticalStandardPane)
                           rows
                           (+ cont 1)
                           1
                           matrix)
         (createBoardButtonsAux rows mxn (+ cont 1) matrix))))

;; creates vertical Pane inside boardPanel
(define (createVerticalStandardPane)
  (new vertical-pane%	 
       [parent boardPanel]	 	 	 
       [alignment '(center center)]))

;; Creates an individual holeButton
;; param: parent object, number columns.
(define (createHoleButton parent rows column cont matrix)
  (cond ((> cont rows)
         "Done creating buttons")
   (else
        (new button%
             [label "Dck"]
             [parent parent]
             [callback (lambda (button event)
                         (setChoseHole cont column matrix))]
             [min-width 45]	 
   	     [min-height 45])
        (createHoleButton parent rows column (+ 1 cont) matrix))))

;; Create a matrix for the gameBoard
(define (createBoardMatrix rows columns result)
  (cond ((zero? columns)
         result)
   (else
         (createBoardMatrix rows (- columns 1) (cons (createList rows '()) result)))))

(define (createList rows result)
  (cond ((zero? rows)
        result)
   (else
        (createList (- rows 1) (append '(0) result)))))


;; When the user chooses a button
(define (setChoseHole rows column matrix)
  (send msg set-label (~a rows
                          "x"
                          column)))

;; --------------- Executing the program ---------------

; Show the frame by calling its show method
(send frame show #t)